#=========================================================================
# Common rules for all Makefiles
#=========================================================================

# Append linker flags set elsewhere
CPPFLAGS	+= $(LINK_CPPFLAGS)
CFLAGS		+= $(LINK_CFLAGS)
CXXFLAGS	+= $(LINK_CXXFLAGS)
LDFLAGS		+= $(LINK_LDFLAGS)

ALL_CFLAGS	:= $(CPPFLAGS) $(CFLAGS)
ALL_CXXFLAGS	:= $(CPPFLAGS) $(CFLAGS) $(CXXFLAGS)

DEPFLAGS	=
ifneq ($(DEP_TRACK), 0)
	DEPFLAGS = -MMD -MF $(basename $@).dep
endif

ALL_BUILD_DIRS = $(BIN_DIR)/ $(OBJ_DIR)/ $(BUILD_DIR)include/ $(BUILD_DIR)lib/

#--------------------------------------------------------------------------
# Rules
#--------------------------------------------------------------------------

all: $(LIB_PATH)


# Build object file from C source
$(OBJ_DIR)%.o:: %.c
	@echo CC $< $@
	$(CC) -c $(ALL_CFLAGS) $< -o $@ $(DEPFLAGS)

# Build object file from C++ source
$(OBJ_DIR)%.o:: %.cpp
	@echo CXX $< $@
	$(CXX) -c $(ALL_CXXFLAGS) $< -o $@ $(DEPFLAGS)

$(OBJ_DIR)%.o:: %.cc
	@echo CXX $< $@
	$(CXX) -c $(ALL_CXXFLAGS) $< -o $@ $(DEPFLAGS)
	
# Build object file from Obj-C++ source
$(OBJ_DIR)%.o:: %.mm
	@echo CXX $< $@
	$(CXX) -c $(ALL_CXXFLAGS) $< -o $@ $(DEPFLAGS)

# Build pre-compiled headers
$(OBJ_DIR)%.hpp.gch:: %.hpp
	@echo CXX $< $@
	$(CXX) -x c++ -c $(ALL_CXXFLAGS) -Winvalid-pch $< -o $@ $(DEPFLAGS)

# Include GCC generated dependency files
-include $(wildcard $(OBJ_DIR)*.dep)

# Prevent Make from automatically searching its predefined implicit rules
%.dep: ;
Makefile.%: ;
%.inl: ;
%.h: ;
%.hpp: ;

# Build static library
$(SLIB_PATH): $(addprefix $(OBJ_DIR), $(OBJS) $(PCHS))
ifneq ($(OBJS),)
	@echo AR $@
	@$(RM) $@
	$(AR) $@ $(filter %.o, $^) $(SLIB_FLAGS)
#	@$(RANLIB) $@
#	libtool --mode=link --tag=CXX $(filter %.o, $^) $(SLIB_FLAGS) -o $@
#	@libtool -static $@ $(patsubst %, $(DEV_DIR)lib/lib%.a, $(STATIC_LIBS)) -o $@
endif


# Build dynamic library
$(DLIB_PATH): $(addprefix $(OBJ_DIR), $(OBJS))
ifneq ($(OBJS),)
	@echo DY $@
	$(CXX) $(DLIB_FLAGS) $(ALL_CXXFLAGS) -o $@ $(filter %.o, $^) $(LDFLAGS)
endif


# Dummy target to force rebuilds
FORCE: ;


# This creates a particular build folder
$(ALL_BUILD_DIRS):
	@mkdir -p $@

# This rule creates all the build directories ONCE when the first object is built
$(addprefix $(OBJ_DIR), $(OBJS)): | $(ALL_BUILD_DIRS)


# Create file with settings for linking to external libraries
linkfile:
	$(eval $@_STR := "LDFLAGS += -l$(LIB_NAME)")
ifneq ($(strip $(LINK_LDFLAGS)),)
	$(eval $@_STR += " $(LINK_LDFLAGS)")
endif
ifneq ($(strip $(LINK_CPPFLAGS)),)
	$(eval $@_STR += "\r\nCPPFLAGS +=$(LINK_CPPFLAGS)")
endif
ifneq ($(strip $(LINK_CFLAGS)),)
	$(eval $@_STR += "\r\nCFLAGS +=$(LINK_CFLAGS)")
endif
ifneq ($(strip $(LINK_CXXFLAGS)),)
	$(eval $@_STR += "\r\nCXXFLAGS +=$(LINK_CXXFLAGS)")
endif
	@printf "%b" $($@_STR) > Makefile.link


# Archive repository
archive:
	@echo Creating archive $(LIB_NAME).zip...
	@git archive --format zip --output ./$(LIB_NAME).zip master

##	svn version
#	$(eval $@_TMP := $(shell mktemp -d tmp.XXXXXXXXXX))
#	@echo Creating archive, this may take some time...
#	@echo Creating temporary export...
#	@svn export --force . $($@_TMP)
#	@echo Compressing...
#	@cd $($@_TMP) && tar -czf ../$(LIB_NAME).tar.gz .
#	@echo Compression complete.
#	@$(RM) -R $($@_TMP)
