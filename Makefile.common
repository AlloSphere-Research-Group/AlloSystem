###########################################################################
# Standard Make variable definitions
#
# These are the common variable definitions used across different projects.
# This will usually be included at the top of a separate project specific 
# Makefile using 'include Makefile.common'.
###########################################################################
#==========================================================================
# Command-line options
# Modify for your system -or- use command-line argument OPTION=string
#==========================================================================
#--------------------------------------------------------------------------
# Operating system variables
#--------------------------------------------------------------------------
# Operating system: 'macosx', 'linux', or 'windows'
UNAME := $(shell uname)
ifeq ($(UNAME), Linux)
	PLATFORM = linux
else ifeq ($(UNAME), Darwin)
	PLATFORM = macosx
else
	PLATFORM = windows
endif

# Architecture: '32' or '64'
UNAMEM := $(shell uname -m)
ifeq ($(UNAMEM), $(findstring $(UNAMEM), x86_64 ia86 amd64))
	ARCH = 64
else
	ARCH = 32
endif

# Mac OS X version: '10_6' or '10_5'
UNAME := $(shell uname -r)
ifeq ($(UNAME), $(findstring $(UNAME), 10.6.0 10.7.0))
    OSX_VERSION = 10_6
else
    OSX_VERSION = 10_5
endif

#
USING_PUREDYNE	= 0

#--------------------------------------------------------------------------
# Build settings
#--------------------------------------------------------------------------
LIB_NAME	?=

# Build configuration: 'Release' or 'Debug'
BUILD_CONFIG	= Release

# Whether to show verbose output
VERBOSE		= 0

# Whether Make should determine the dependencies of each C or C++ file as
# it compiles it. This will be automatically disabled for universal builds
# on Mac OSX.
DEP_TRACK = 1
ifeq ($(ARCH), 32_64)
	DEP_TRACK = 0
endif

# Whether to enable strict warnings
STRICT_WARNINGS = 1

# Whether to automatically run executables after building
AUTORUN		= 1

SLIB_EXT	= a
DLIB_EXT	= so
DLIB_OPT	= shared

# Flags required for including and linking against library
EXT_CPPFLAGS	?=
EXT_LDFLAGS	?=

STATIC_LIB_FLAGS ?=

#--------------------------------------------------------------------------
# Default paths
#--------------------------------------------------------------------------
PREFIX		= /usr/local/
CONFPREFIX	= $(PREFIX)/etc/
MANPREFIX	= $(PREFIX)/share/man/

# Locations of built objects
BUILD_DIR	= build/
BIN_DIR		= $(BUILD_DIR)bin/
OBJ_DIR		= $(BUILD_DIR)obj/

# Location of library installation
DESTDIR		= $(PREFIX)

# Platform-dependent directory
PLATFORM_DIR ?=

#--------------------------------------------------------------------------
# Default tools/commands
#--------------------------------------------------------------------------

# NOTE: ar -s is completely equivalent to running ranlib
ifeq ($(PLATFORM), linux)
# NOTE: -T is 'thin' archive under some Linux distros which 
# may not be what we want here...
#	AR = ar crsT
	AR = ar crs
else
	AR = ar crs
endif
INSTALL		= install
RANLIB		= ranlib
RM		= rm -df

# Linux:
ifeq ($(PLATFORM), linux)

	PLATFORM_DIR = linux/

	ifneq ($(USING_PUREDYNE), 0)
		CXX = gcc
	endif
	
	#CXX = clang++

	ifeq ($(ARCH), 32)
		CFLAGS += -m32
	else ifeq ($(ARCH), 64)
		CFLAGS += -m64
	else ifeq ($(ARCH), 32_64)
		CFLAGS += -m32 -m64
	endif

	CPPFLAGS += -D__LINUX__ -DLINUX
	LDFLAGS	+= -lm -lstdc++

# Mac OSX:
else ifeq ($(PLATFORM), macosx)

	PLATFORM_DIR = osx/

	ifeq ($(ARCH), 32)
		CFLAGS += -arch i386
	else ifeq ($(ARCH), 64)
		CFLAGS += -arch x86_64
	else ifeq ($(ARCH), 32_64)
		CFLAGS += -arch i386 -arch x86_64
	endif

	#CXX = @clang++

	CFLAGS += -isysroot

	ifeq ($(OSX_VERSION), 10_6)
# commented out, because our support libs are built against 10.5.
#		CFLAGS += /Developer/SDKs/MacOSX10.6.sdk -mmacosx-version-min=10.6
		CFLAGS += /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5
	else ifeq ($(OSX_VERSION), 10_5)
		CFLAGS += /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5
#		LDFLAGS += -syslibroot /Developer/SDKs/MacOSX10.5.sdk
	else ifeq ($(OSX_VERSION), 10_4)
		CFLAGS += /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4
#		LDFLAGS += -syslibroot /Developer/SDKs/MacOSX10.4u.sdk
	endif

	LDFLAGS	+= -lm -lstdc++
	DLIB_EXT = dylib
	DLIB_OPT = dynamiclib

# Windows:
else ifeq ($(PLATFORM), windows)

	PLATFORM_DIR = windows/

	SLIB_EXT = lib
	DLIB_EXT = dll
endif


#--------------------------------------------------------------------------
# Finalize variables
#--------------------------------------------------------------------------
ifeq ($(BUILD_CONFIG), Release)
	CFLAGS += -O3 -fpeel-loops
else
endif

#LDFLAGS += -fvisibility=default
#LDFLAGS += -fvisibility-inlines-hidden -fvisibility=hidden

ifeq ($(VERBOSE), 0)
	AR  := @$(AR)
	CC  := @$(CC)
	CXX := @$(CXX)
endif

ifneq ($(STRICT_WARNINGS), 0)
	CFLAGS += \
		-Wreturn-type \
		-Wformat -Wmissing-braces -Wparentheses -Wswitch \
		-Wunused-variable -Wsign-compare -Wno-unknown-pragmas 
	CXXFLAGS += -Wnon-virtual-dtor -Woverloaded-virtual
endif

SLIB_FILE = lib$(LIB_NAME).$(SLIB_EXT)
DLIB_FILE = lib$(LIB_NAME).$(DLIB_EXT)
DLIB_PATH = $(addprefix $(BUILD_DIR)lib/, $(DLIB_FILE))
SLIB_PATH = $(addprefix $(BUILD_DIR)lib/, $(SLIB_FILE))
