# RUN_DIRS must contain the directory of the source file to be executed.

#RUN_INC_DIRS	?=
#RUN_SRC_DIRS	?=

# Include user file, if present
RUN_DIR = $(dir $(lastword $(MAKECMDGOALS)))
-include $(RUN_DIR)Makefile.user

# Add user specified source dirs to global Make vars
VPATH += $(RUN_SRC_DIRS)
CPPFLAGS += $(addprefix -I, $(RUN_SRC_DIRS))

# Create list of all valid source files found in RUN_SRC_DIRS
RUN_SRCS	 = $(wildcard $(addsuffix /*.cpp, $(RUN_SRC_DIRS)))
RUN_SRCS	+= $(wildcard $(addsuffix /*.cc, $(RUN_SRC_DIRS)))
RUN_SRCS	+= $(wildcard $(addsuffix /*.c, $(RUN_SRC_DIRS)))

# Add Objective-C++ support if using OSX
ifeq ($(PLATFORM), macosx)
RUN_SRCS	+= $(wildcard $(addsuffix /*.mm, $(RUN_SRC_DIRS)))
endif

# Generate .o targets from all sources in RUN_SRC_DIRS
RUN_OBJS	 = $(addsuffix .o, $(basename $(notdir $(RUN_SRCS)) ))
#RUN_OBJS	:= $(addsuffix .o, $(basename $(subst /,_,$(RUN_OBJS)) ))
RUN_OBJS	:= $(addprefix $(OBJ_DIR), $(RUN_OBJS))

# These variables are used to link to all libraries found in build/lib/
LINK_LIBS_PATH  = $(wildcard $(BUILD_DIR)lib/*.$(SLIB_EXT))
LINK_LIBS_PATH += $(wildcard $(BUILD_DIR)lib/*.$(DLIB_EXT))
LINK_LIBS_FLAGS =

ALL_CXXFLAGS := $(CPPFLAGS) $(CFLAGS) $(CXXFLAGS)

# For whatever reason, we need this rule so the objects don't get rm'ed by make
runobjs: $(RUN_OBJS)

# Prevent circular dependencies with compile-and-run rule
#.PHONY: %.hpp
#%.hpp:

# Compile and run source files in any of the RUN_DIRS directories
# Note that if any of the directories in RUN_DIRS match those in RUN_SRC_DIRS,
# a circular dependency is likely to occur with the standard %.o : %.cpp rule.
# Note, the crazy regex used to determine RUN_MAIN_SOURCE_PATH replaces single
# letter drive paths /c/ with c:/ which are compatible with Windows file system.
EXEC_TARGETS = $(addsuffix *.cpp, $(RUN_DIRS)) $(addsuffix *.c, $(RUN_DIRS)) $(addsuffix *.mm, $(RUN_DIRS))
ifeq ($(PLATFORM), linux)
	LINK_LIBS_FLAGS += $(addprefix -l :, $(notdir $(LINK_LIBS_PATH)))
endif
.PRECIOUS: $(EXEC_TARGETS)
$(EXEC_TARGETS): MY_FLAGS = $(shell test -e $(@D)/flags.txt && cat $(@D)/flags.txt)
$(EXEC_TARGETS): MY_FLAGS += -DRUN_MAIN_SOURCE_PATH="\"$(shell echo $(realpath $(@D)) | sed 's_/\(.\)/_\1:/_')/\""
#$(EXEC_TARGETS): MY_FLAGS += -l$(LIB_NAME)
$(EXEC_TARGETS): FORCE $(ALL_BUILD_DIRS) $(LIB_PATH) runobjs
	$(CXX) $(ALL_CXXFLAGS) -o $(BIN_DIR)$(*F) $@ $(RUN_OBJS) $(LINK_LIBS_FLAGS) $(LINK_LIBS_PATH) $(LDFLAGS) $(subst $$(PROJECT_DIR),$(@D)/,$(MY_FLAGS))
ifneq ($(AUTORUN), 0)
    ifeq ($(BUILD_CONFIG),Release)
		@cd $(BIN_DIR) && ./$(*F)
    else
		$(DBG) $(BIN_DIR)$(*F) $(DBGFLAGS) -ex "cd $(BIN_DIR)" -ex "run"
    endif
endif
