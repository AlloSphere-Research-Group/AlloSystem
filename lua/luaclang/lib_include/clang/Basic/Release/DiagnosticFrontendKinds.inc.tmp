#ifdef FRONTENDSTART
__FRONTENDSTART = DIAG_START_FRONTEND,
#undef FRONTENDSTART
#endif
DIAG(err_fe_error_backend, CLASS_ERROR, diag::MAP_FATAL, "error in backend: %0", 0, true)
DIAG(err_fe_error_reading, CLASS_ERROR, diag::MAP_ERROR, "error reading '%0'", 0, true)
DIAG(err_fe_error_reading_stdin, CLASS_ERROR, diag::MAP_ERROR, "error reading stdin", 0, true)
DIAG(err_fe_unknown_triple, CLASS_ERROR, diag::MAP_ERROR, "unknown target triple '%0', please use -triple or -arch", 0, true)
DIAG(err_not_a_pch_file, CLASS_ERROR, diag::MAP_FATAL, "'%0' does not appear to be a precompiled header file", 0, true)
DIAG(err_relocatable_without_without_isysroot, CLASS_ERROR, diag::MAP_ERROR, "must specify system root with -isysroot when building a relocatable PCH file", 0, true)
DIAG(note_fixit_applied, CLASS_NOTE, diag::MAP_FATAL, "FIX-IT applied suggested code changes", 0, true)
DIAG(note_fixit_failed, CLASS_NOTE, diag::MAP_FATAL, "FIX-IT unable to apply suggested code changes", 0, true)
DIAG(note_fixit_in_macro, CLASS_NOTE, diag::MAP_FATAL, "FIX-IT unable to apply suggested code changes in a macro", 0, true)
DIAG(note_fixit_unfixed_error, CLASS_NOTE, diag::MAP_FATAL, "FIX-IT detected an error it cannot fix", 0, true)
DIAG(note_pch_macro_defined_as, CLASS_NOTE, diag::MAP_FATAL, "definition of macro '%0' in the precompiled header", 0, true)
DIAG(note_using_macro_def_from_pch, CLASS_NOTE, diag::MAP_FATAL, "using this macro definition from precompiled header", 0, true)
DIAG(warn_cmdline_conflicting_macro_def, CLASS_ERROR, diag::MAP_ERROR, "definition of the macro '%0' conflicts with the definition used to build the precompiled header", 0, true)
DIAG(warn_cmdline_missing_macro_defs, CLASS_WARNING, diag::MAP_WARNING, "macro definitions used to build the precompiled header are missing", 0, true)
DIAG(warn_fixit_no_changes, CLASS_NOTE, diag::MAP_FATAL, "FIX-IT detected errors it could not fix; no output will be generated", 0, true)
DIAG(warn_macro_name_used_in_pch, CLASS_ERROR, diag::MAP_ERROR, "definition of macro %0 conflicts with an identifier used in the precompiled header", 0, true)
DIAG(warn_pch_access_control, CLASS_ERROR, diag::MAP_ERROR, "C++ access control was %select{disabled|enabled}0 in the PCH file but is currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_altivec, CLASS_ERROR, diag::MAP_ERROR, "AltiVec initializers were %select{disabled|enabled}0 in PCH file but are currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_blocks, CLASS_ERROR, diag::MAP_ERROR, "blocks were %select{disabled|enabled}0 in PCH file but are currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_builtins, CLASS_ERROR, diag::MAP_ERROR, "PCH file was compiled with builtins %select{enabled|disabled}0 but builtins are currently %select{enabled|disabled}1", 0, true)
DIAG(warn_pch_c99, CLASS_ERROR, diag::MAP_ERROR, "C99 support was %select{disabled|enabled}0 in PCH file but is currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_char_signed, CLASS_ERROR, diag::MAP_ERROR, "char was %select{unsigned|signed}0 in the PCH file but is currently %select{unsigned|signed}1", 0, true)
DIAG(warn_pch_compiler_options_mismatch, CLASS_ERROR, diag::MAP_ERROR, "compiler options used when building the precompiled header differ from the options used when using the precompiled header", 0, true)
DIAG(warn_pch_cplusplus, CLASS_ERROR, diag::MAP_ERROR, "C++ support was %select{disabled|enabled}0 in PCH file but is currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_cplusplus0x, CLASS_ERROR, diag::MAP_ERROR, "C++0x support was %select{disabled|enabled}0 in PCH file but is currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_exceptions, CLASS_ERROR, diag::MAP_ERROR, "exceptions were %select{disabled|enabled}0 in PCH file but are currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_extensions, CLASS_ERROR, diag::MAP_ERROR, "extensions were %select{enabled|disabled}0 in PCH file but are currently %select{enabled|disabled}1", 0, true)
DIAG(warn_pch_freestanding, CLASS_ERROR, diag::MAP_ERROR, "PCH file was compiled with a %select{hosted|freestanding}0  implementation but a %select{hosted|freestanding}1 implementation is selected", 0, true)
DIAG(warn_pch_gc_mode, CLASS_ERROR, diag::MAP_ERROR, "the PCH file was built with %select{no||hybrid}0 garbage collection but the current translation unit will compiled with %select{no||hybrid}1 garbage collection", 0, true)
DIAG(warn_pch_gnu_extensions, CLASS_ERROR, diag::MAP_ERROR, "GNU extensions were %select{disabled|enabled}0 in PCH file but are currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_gnu_inline, CLASS_ERROR, diag::MAP_ERROR, "PCH file was compiled with %select{C99|GNU|}0 inline semantics but %select{C99|GNU}1 inline semantics are currently selected", 0, true)
DIAG(warn_pch_heinous_extensions, CLASS_ERROR, diag::MAP_ERROR, "heinous extensions were %select{disabled|enabled}0 in PCH file but are currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_lax_vector_conversions, CLASS_ERROR, diag::MAP_ERROR, "lax vector conversions were %select{disabled|enabled}0 in PCH file but are currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_math_errno, CLASS_ERROR, diag::MAP_ERROR, "math functions %select{do not respect|respect}0 'errno' in PCH file but they are currently set to %select{not respect|respect}1 'errno'", 0, true)
DIAG(warn_pch_microsoft_extensions, CLASS_ERROR, diag::MAP_ERROR, "Microsoft extensions were %select{disabled|enabled}0 in PCH file but are currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_no_inline, CLASS_ERROR, diag::MAP_ERROR, "the macro '__NO_INLINE__' was %select{not defined|defined}0 in the PCH file but is currently %select{undefined|defined}1", 0, true)
DIAG(warn_pch_nonfragile_abi, CLASS_ERROR, diag::MAP_ERROR, "PCH file was compiled with the %select{32-bit|non-fragile}0 Objective-C ABI but the %select{32-bit|non-fragile}1 Objective-C ABI is selected", 0, true)
DIAG(warn_pch_objc_runtime, CLASS_ERROR, diag::MAP_ERROR, "PCH file was compiled with the %select{NeXT|GNU}0 runtime but the %select{NeXT|GNU}1 runtime is selected", 0, true)
DIAG(warn_pch_objective_c, CLASS_ERROR, diag::MAP_ERROR, "Objective-C support was %select{disabled|enabled}0 in PCH file but is currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_objective_c2, CLASS_ERROR, diag::MAP_ERROR, "Objective-C 2.0 support was %select{disabled|enabled}0 in PCH file but is currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_opencl, CLASS_ERROR, diag::MAP_ERROR, "OpenCL language extensions were %select{disabled|enabled}0 in PCH file but are currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_optimize, CLASS_ERROR, diag::MAP_ERROR, "the macro '__OPTIMIZE__' was %select{not defined|defined}0 in the PCH file but is currently %select{undefined|defined}1", 0, true)
DIAG(warn_pch_optimize_size, CLASS_ERROR, diag::MAP_ERROR, "the macro '__OPTIMIZE_SIZE__' was %select{not defined|defined}0 in the PCH file but is currently %select{undefined|defined}1", 0, true)
DIAG(warn_pch_overflow_checking, CLASS_ERROR, diag::MAP_ERROR, "signed integer overflow checking was %select{disabled|enabled}0 in PCH file but is currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_pic_level, CLASS_ERROR, diag::MAP_ERROR, "PCH file was compiled with PIC level %0, but the current translation unit will be compiled with PIC level %1", 0, true)
DIAG(warn_pch_static, CLASS_ERROR, diag::MAP_ERROR, "the PCH file was compiled %select{dynamic|static}0 but the current translation unit is being compiled as %select{dynamic|static}1", 0, true)
DIAG(warn_pch_target_triple, CLASS_ERROR, diag::MAP_ERROR, "PCH file was compiled for the target '%0' but the current translation unit is being compiled for target '%1'", 0, true)
DIAG(warn_pch_thread_safe_statics, CLASS_ERROR, diag::MAP_ERROR, "PCH file was compiled %select{without|with}0 thread-safe statics butthread-safe statics are currently %select{disabled|enabled}1", 0, true)
DIAG(warn_pch_version_too_new, CLASS_ERROR, diag::MAP_ERROR, "PCH file uses a newer PCH format that cannot be read", 0, true)
DIAG(warn_pch_version_too_old, CLASS_ERROR, diag::MAP_ERROR, "PCH file uses an older PCH format that is no longer supported", 0, true)
DIAG(warn_unknown_warning_option, CLASS_WARNING, diag::MAP_WARNING, "unknown warning option '%0'", "unknown-warning-option", true)
