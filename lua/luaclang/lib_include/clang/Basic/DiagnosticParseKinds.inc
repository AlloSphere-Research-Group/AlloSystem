#ifdef PARSESTART
__PARSESTART = DIAG_START_PARSE,
#undef PARSESTART
#endif
DIAG(err_anon_type_definition, CLASS_ERROR, diag::MAP_ERROR, "declaration of anonymous %0 must be a definition", 0, true)
DIAG(err_argument_required_after_attribute, CLASS_ERROR, diag::MAP_ERROR, "argument required after attribute", 0, true)
DIAG(err_declaration_does_not_declare_param, CLASS_ERROR, diag::MAP_ERROR, "declaration does not declare a parameter", 0, true)
DIAG(err_destructor_class_name, CLASS_ERROR, diag::MAP_ERROR, "expected the class name after '~' to name a destructor", 0, true)
DIAG(err_dup_virtual, CLASS_ERROR, diag::MAP_ERROR, "duplicate 'virtual' in base specifier", 0, true)
DIAG(err_expected_asm_operand, CLASS_ERROR, diag::MAP_ERROR, "expected string literal or '[' for asm operand", 0, true)
DIAG(err_expected_catch, CLASS_ERROR, diag::MAP_ERROR, "expected catch", 0, true)
DIAG(err_expected_class_before, CLASS_ERROR, diag::MAP_ERROR, "expected 'class' before '%0'", 0, true)
DIAG(err_expected_class_name, CLASS_ERROR, diag::MAP_ERROR, "expected class name", 0, true)
DIAG(err_expected_colon_after, CLASS_ERROR, diag::MAP_ERROR, "expected ':' after %0", 0, true)
DIAG(err_expected_comma, CLASS_ERROR, diag::MAP_ERROR, "expected ','", 0, true)
DIAG(err_expected_comma_greater, CLASS_ERROR, diag::MAP_ERROR, "expected ',' or '>' in template-parameter-list", 0, true)
DIAG(err_expected_equal_after_declarator, CLASS_ERROR, diag::MAP_ERROR, "expected '=' after declarator", 0, true)
DIAG(err_expected_equal_designator, CLASS_ERROR, diag::MAP_ERROR, "expected '=' or another designator", 0, true)
DIAG(err_expected_expression, CLASS_ERROR, diag::MAP_ERROR, "expected expression", 0, true)
DIAG(err_expected_external_declaration, CLASS_ERROR, diag::MAP_ERROR, "expected external declaration", 0, true)
DIAG(err_expected_field_designator, CLASS_ERROR, diag::MAP_ERROR, "expected a field designator, such as '.field = 4'", 0, true)
DIAG(err_expected_fn_body, CLASS_ERROR, diag::MAP_ERROR, "expected function body after function declarator", 0, true)
DIAG(err_expected_greater, CLASS_ERROR, diag::MAP_ERROR, "expected '>'", 0, true)
DIAG(err_expected_ident, CLASS_ERROR, diag::MAP_ERROR, "expected identifier", 0, true)
DIAG(err_expected_ident_in_using, CLASS_ERROR, diag::MAP_ERROR, "expected an identifier in using directive", 0, true)
DIAG(err_expected_ident_lbrace, CLASS_ERROR, diag::MAP_ERROR, "expected identifier or '{'", 0, true)
DIAG(err_expected_ident_lparen, CLASS_ERROR, diag::MAP_ERROR, "expected identifier or '('", 0, true)
DIAG(err_expected_lbrace, CLASS_ERROR, diag::MAP_ERROR, "expected '{'", 0, true)
DIAG(err_expected_lbrace_in_compound_literal, CLASS_ERROR, diag::MAP_ERROR, "expected '{' in compound literal", 0, true)
DIAG(err_expected_lbrace_or_comma, CLASS_ERROR, diag::MAP_ERROR, "expected '{' or ','", 0, true)
DIAG(err_expected_less_after, CLASS_ERROR, diag::MAP_ERROR, "expected '<' after '%0'", 0, true)
DIAG(err_expected_lparen, CLASS_ERROR, diag::MAP_ERROR, "expected '('", 0, true)
DIAG(err_expected_lparen_after, CLASS_ERROR, diag::MAP_ERROR, "expected '(' after '%0'", 0, true)
DIAG(err_expected_lparen_after_id, CLASS_ERROR, diag::MAP_ERROR, "expected '(' after %0", 0, true)
DIAG(err_expected_lparen_after_type, CLASS_ERROR, diag::MAP_ERROR, "expected '(' for function-style cast or type construction", 0, true)
DIAG(err_expected_member_name_or_semi, CLASS_ERROR, diag::MAP_ERROR, "expected member name or ';' after declaration specifiers", 0, true)
DIAG(err_expected_member_or_base_name, CLASS_ERROR, diag::MAP_ERROR, "expected class member or base class name", 0, true)
DIAG(err_expected_method_body, CLASS_ERROR, diag::MAP_ERROR, "expected method body", 0, true)
DIAG(err_expected_qualified_after_typename, CLASS_ERROR, diag::MAP_ERROR, "expected a qualified name after 'typename'", 0, true)
DIAG(err_expected_rbrace, CLASS_ERROR, diag::MAP_ERROR, "expected '}'", 0, true)
DIAG(err_expected_rparen, CLASS_ERROR, diag::MAP_ERROR, "expected ')'", 0, true)
DIAG(err_expected_rsquare, CLASS_ERROR, diag::MAP_ERROR, "expected ']'", 0, true)
DIAG(err_expected_selector_for_method, CLASS_ERROR, diag::MAP_ERROR, "expected selector for Objective-C method", 0, true)
DIAG(err_expected_semi_after, CLASS_ERROR, diag::MAP_ERROR, "expected ';' after %0", 0, true)
DIAG(err_expected_semi_after_attribute_list, CLASS_ERROR, diag::MAP_ERROR, "expected ';' after attribute list", 0, true)
DIAG(err_expected_semi_after_expr, CLASS_ERROR, diag::MAP_ERROR, "expected ';' after expression", 0, true)
DIAG(err_expected_semi_after_method_proto, CLASS_ERROR, diag::MAP_ERROR, "expected ';' after method prototype", 0, true)
DIAG(err_expected_semi_after_namespace_name, CLASS_ERROR, diag::MAP_ERROR, "expected ';' after namespace name", 0, true)
DIAG(err_expected_semi_after_static_assert, CLASS_ERROR, diag::MAP_ERROR, "expected ';' after static_assert", 0, true)
DIAG(err_expected_semi_after_stmt, CLASS_ERROR, diag::MAP_ERROR, "expected ';' after %0 statement", 0, true)
DIAG(err_expected_semi_decl_list, CLASS_ERROR, diag::MAP_ERROR, "expected ';' at end of declaration list", 0, true)
DIAG(err_expected_semi_declaration, CLASS_ERROR, diag::MAP_ERROR, "expected ';' at end of declaration", 0, true)
DIAG(err_expected_semi_for, CLASS_ERROR, diag::MAP_ERROR, "expected ';' in 'for' statement specifier", 0, true)
DIAG(err_expected_statement, CLASS_ERROR, diag::MAP_ERROR, "expected statement", 0, true)
DIAG(err_expected_string_literal, CLASS_ERROR, diag::MAP_ERROR, "expected string literal", 0, true)
DIAG(err_expected_template, CLASS_ERROR, diag::MAP_ERROR, "expected template", 0, true)
DIAG(err_expected_type, CLASS_ERROR, diag::MAP_ERROR, "expected a type", 0, true)
DIAG(err_expected_type_id_after, CLASS_ERROR, diag::MAP_ERROR, "expected type-id after '%0'", 0, true)
DIAG(err_expected_type_name_after_typename, CLASS_ERROR, diag::MAP_ERROR, "expected an identifier or template-id after '::'", 0, true)
DIAG(err_expected_unqualified_id, CLASS_ERROR, diag::MAP_ERROR, "expected unqualified-id", 0, true)
DIAG(err_expected_while, CLASS_ERROR, diag::MAP_ERROR, "expected 'while' in do/while loop", 0, true)
DIAG(err_explicit_instantiation_with_definition, CLASS_ERROR, diag::MAP_ERROR, "explicit template instantiation cannot have a definition; if this definition is meant to be an explicit specialization, add '<>' after the 'template' keyword", 0, true)
DIAG(err_friend_invalid_in_context, CLASS_ERROR, diag::MAP_ERROR, "'friend' used outside of class", 0, true)
DIAG(err_friend_storage_spec, CLASS_ERROR, diag::MAP_ERROR, "'%0' is invalid in friend declarations", 0, true)
DIAG(err_func_def_no_params, CLASS_ERROR, diag::MAP_ERROR, "function definition does not declare parameters", 0, true)
DIAG(err_function_declared_typedef, CLASS_ERROR, diag::MAP_ERROR, "function definition declared 'typedef'", 0, true)
DIAG(err_id_after_template_in_nested_name_spec, CLASS_ERROR, diag::MAP_ERROR, "expected template name after 'template' keyword in nested name specifier", 0, true)
DIAG(err_id_after_template_in_typename_spec, CLASS_ERROR, diag::MAP_ERROR, "expected template name after 'template' keyword in typename specifier", 0, true)
DIAG(err_illegal_decl_reference_to_reference, CLASS_ERROR, diag::MAP_ERROR, "%0 declared as a reference to a reference", 0, true)
DIAG(err_invalid_complex_spec, CLASS_ERROR, diag::MAP_ERROR, "'_Complex %0' is invalid", 0, true)
DIAG(err_invalid_decl_spec_combination, CLASS_ERROR, diag::MAP_ERROR, "cannot combine with previous '%0' declaration specifier", 0, true)
DIAG(err_invalid_long_spec, CLASS_ERROR, diag::MAP_ERROR, "'long %0' is invalid", 0, true)
DIAG(err_invalid_longlong_spec, CLASS_ERROR, diag::MAP_ERROR, "'long long %0' is invalid", 0, true)
DIAG(err_invalid_reference_qualifier_application, CLASS_ERROR, diag::MAP_ERROR, "'%0' qualifier may not be applied to a reference", 0, true)
DIAG(err_invalid_short_spec, CLASS_ERROR, diag::MAP_ERROR, "'short %0' is invalid", 0, true)
DIAG(err_invalid_sign_spec, CLASS_ERROR, diag::MAP_ERROR, "'%0' cannot be signed or unsigned", 0, true)
DIAG(err_invalid_token_after_toplevel_declarator, CLASS_ERROR, diag::MAP_ERROR, "invalid token after top level declarator", 0, true)
DIAG(err_label_end_of_compound_statement, CLASS_ERROR, diag::MAP_ERROR, "label at end of compound statement: expected statement", 0, true)
DIAG(err_less_after_template_name_in_nested_name_spec, CLASS_ERROR, diag::MAP_ERROR, "expected '<' after 'template %0' in nested name specifier", 0, true)
DIAG(err_missing_catch_finally, CLASS_ERROR, diag::MAP_ERROR, "@try statement without a @catch and @finally clause", 0, true)
DIAG(err_missing_class_definition, CLASS_ERROR, diag::MAP_ERROR, "cannot find definition of 'Class'", 0, true)
DIAG(err_missing_id_definition, CLASS_ERROR, diag::MAP_ERROR, "cannot find definition of 'id'", 0, true)
DIAG(err_missing_param, CLASS_ERROR, diag::MAP_ERROR, "expected parameter declarator", 0, true)
DIAG(err_missing_proto_definition, CLASS_ERROR, diag::MAP_ERROR, "cannot find definition of 'Protocol'", 0, true)
DIAG(err_missing_sel_definition, CLASS_ERROR, diag::MAP_ERROR, "cannot find definition of 'SEL'", 0, true)
DIAG(err_multiple_template_declarators, CLASS_ERROR, diag::MAP_ERROR, "%select{|a template declaration|an explicit template specialization|an explicit template instantiation}0 can only %select{|declare|declare|instantiate}0 a single entity", 0, true)
DIAG(err_no_matching_param, CLASS_ERROR, diag::MAP_ERROR, "parameter named %0 is missing", 0, true)
DIAG(err_objc_concat_string, CLASS_ERROR, diag::MAP_ERROR, "unexpected token after Objective-C string", 0, true)
DIAG(err_objc_directive_only_in_protocol, CLASS_ERROR, diag::MAP_ERROR, "directive may only be specified in protocols only", 0, true)
DIAG(err_objc_expected_equal, CLASS_ERROR, diag::MAP_ERROR, "setter/getter expects '=' followed by name", 0, true)
DIAG(err_objc_expected_property_attr, CLASS_ERROR, diag::MAP_ERROR, "unknown property attribute %0", 0, true)
DIAG(err_objc_illegal_interface_qual, CLASS_ERROR, diag::MAP_ERROR, "illegal interface qualifier", 0, true)
DIAG(err_objc_illegal_visibility_spec, CLASS_ERROR, diag::MAP_ERROR, "illegal visibility specification", 0, true)
DIAG(err_objc_missing_end, CLASS_ERROR, diag::MAP_ERROR, "missing @end", 0, true)
DIAG(err_objc_no_attributes_on_category, CLASS_ERROR, diag::MAP_ERROR, "attributes may not be specified on a category", 0, true)
DIAG(err_objc_propertoes_require_objc2, CLASS_ERROR, diag::MAP_ERROR, "properties are an Objective-C 2 feature", 0, true)
DIAG(err_objc_property_bitfield, CLASS_ERROR, diag::MAP_ERROR, "property name cannot be a bitfield", 0, true)
DIAG(err_objc_property_requires_field_name, CLASS_ERROR, diag::MAP_ERROR, "property requires fields to be named", 0, true)
DIAG(err_objc_unexpected_attr, CLASS_ERROR, diag::MAP_ERROR, "prefix attribute must be followed by an interface or protocol", 0, true)
DIAG(err_operator_missing_type_specifier, CLASS_ERROR, diag::MAP_ERROR, "missing type specifier after 'operator'", 0, true)
DIAG(err_parse_error, CLASS_ERROR, diag::MAP_ERROR, "parse error", 0, true)
DIAG(err_rvalue_reference, CLASS_ERROR, diag::MAP_ERROR, "rvalue references are only allowed in C++0x", 0, true)
DIAG(err_template_spec_syntax_non_template, CLASS_ERROR, diag::MAP_ERROR, "identifier followed by '<' indicates a class template specialization but %0 %select{does not refer to a template|refers to a function template|<unused>|refers to a template template parameter}1", 0, true)
DIAG(err_two_right_angle_brackets_need_space, CLASS_ERROR, diag::MAP_ERROR, "a space is required between consecutive right angle brackets (use '> >')", 0, true)
DIAG(err_typename_invalid_functionspec, CLASS_ERROR, diag::MAP_ERROR, "type name does not allow function specifier to be specified", 0, true)
DIAG(err_typename_invalid_storageclass, CLASS_ERROR, diag::MAP_ERROR, "type name does not allow storage class to be specified", 0, true)
DIAG(err_typename_refers_to_non_type_template, CLASS_ERROR, diag::MAP_ERROR, "typename specifier refers to a non-template", 0, true)
DIAG(err_typename_requires_specqual, CLASS_ERROR, diag::MAP_ERROR, "type name requires a specifier or qualifier", 0, true)
DIAG(err_unexpected_at, CLASS_ERROR, diag::MAP_ERROR, "unexpected '@' in program", 0, true)
DIAG(err_unexpected_namespace_attributes_alias, CLASS_ERROR, diag::MAP_ERROR, "attributes can not be specified on namespace alias", 0, true)
DIAG(err_unexpected_template_spec_in_using, CLASS_ERROR, diag::MAP_ERROR, "use of template specialization in using directive not allowed", 0, true)
DIAG(err_unexpected_typedef_ident, CLASS_ERROR, diag::MAP_ERROR, "unexpected type name %0: expected identifier", 0, true)
DIAG(err_unknown_typename, CLASS_ERROR, diag::MAP_ERROR, "unknown type name %0", 0, true)
DIAG(err_unspecified_vla_size_with_static, CLASS_ERROR, diag::MAP_ERROR, "'static' may not be used with an unspecified variable length array size", 0, true)
DIAG(err_use_of_tag_name_without_tag, CLASS_ERROR, diag::MAP_ERROR, "use of tagged type %0 without '%1' tag", 0, true)
DIAG(err_using_namespace_in_class, CLASS_ERROR, diag::MAP_ERROR, "'using namespace' in class not allowed", 0, true)
DIAG(err_variadic_templates, CLASS_ERROR, diag::MAP_ERROR, "variadic templates are only allowed in C++0x", 0, true)
DIAG(error_property_ivar_decl, CLASS_ERROR, diag::MAP_ERROR, "property synthesize requires specification of an ivar", 0, true)
DIAG(ext_c99_compound_literal, CLASS_EXTENSION, diag::MAP_IGNORE, "compound literals are a C99-specific feature", 0, true)
DIAG(ext_c99_variable_decl_in_for_loop, CLASS_EXTENSION, diag::MAP_IGNORE, "variable declaration in for loop is a C99-specific feature", 0, true)
DIAG(ext_duplicate_declspec, CLASS_EXTENSION, diag::MAP_IGNORE, "duplicate '%0' declaration specifier", 0, true)
DIAG(ext_ellipsis_exception_spec, CLASS_EXTENSION, diag::MAP_IGNORE, "exception specification of '...' is a Microsoft extension", 0, true)
DIAG(ext_empty_source_file, CLASS_EXTENSION, diag::MAP_IGNORE, "ISO C forbids an empty source file", 0, true)
DIAG(ext_empty_struct_union_enum, CLASS_EXTENSION, diag::MAP_IGNORE, "use of empty %0 extension", 0, true)
DIAG(ext_enumerator_list_comma, CLASS_EXTENSION, diag::MAP_IGNORE, "commas at the end of enumerator lists are a %select{C99|C++0x}0-specific feature", 0, true)
DIAG(ext_expected_semi_decl_list, CLASS_EXTENSION, diag::MAP_IGNORE, "expected ';' at end of declaration list", 0, true)
DIAG(ext_extra_struct_semi, CLASS_EXTENSION, diag::MAP_IGNORE, "extra ';' inside a struct or union", 0, true)
DIAG(ext_gnu_address_of_label, CLASS_EXTENSION, diag::MAP_IGNORE, "use of GNU address-of-label extension", 0, true)
DIAG(ext_gnu_array_range, CLASS_EXTENSION, diag::MAP_IGNORE, "use of GNU array range extension", 0, true)
DIAG(ext_gnu_case_range, CLASS_EXTENSION, diag::MAP_IGNORE, "use of GNU case range extension", 0, true)
DIAG(ext_gnu_conditional_expr, CLASS_EXTENSION, diag::MAP_IGNORE, "use of GNU ?: expression extension, eliding middle term", 0, true)
DIAG(ext_gnu_empty_initializer, CLASS_EXTENSION, diag::MAP_IGNORE, "use of GNU empty initializer extension", 0, true)
DIAG(ext_gnu_indirect_goto, CLASS_EXTENSION, diag::MAP_IGNORE, "use of GNU indirect-goto extension", 0, true)
DIAG(ext_gnu_missing_equal_designator, CLASS_EXTENSION, diag::MAP_WARNING, "use of GNU 'missing =' extension in designator", 0, true)
DIAG(ext_gnu_old_style_field_designator, CLASS_EXTENSION, diag::MAP_WARNING, "use of GNU old-style field designator extension", 0, true)
DIAG(ext_gnu_statement_expr, CLASS_EXTENSION, diag::MAP_IGNORE, "use of GNU statement expression extension", 0, true)
DIAG(ext_ident_list_in_param, CLASS_EXTENSION, diag::MAP_IGNORE, "type-less parameter names in function declaration", 0, true)
DIAG(ext_integer_complex, CLASS_EXTENSION, diag::MAP_IGNORE, "complex integer types are an extension", 0, true)
DIAG(ext_plain_complex, CLASS_EXTENSION, diag::MAP_WARNING, "plain '_Complex' requires a type specifier; assuming '_Complex double'", 0, true)
DIAG(ext_thread_before, CLASS_EXTENSION, diag::MAP_IGNORE, "'__thread' before 'static'", 0, true)
DIAG(ext_top_level_semi, CLASS_EXTENSION, diag::MAP_IGNORE, "extra ';' outside of a function", 0, true)
DIAG(w_asm_qualifier_ignored, CLASS_WARNING, diag::MAP_WARNING, "ignored %0 qualifier on asm", 0, true)
DIAG(warn_cxx0x_right_shift_in_template_arg, CLASS_WARNING, diag::MAP_WARNING, "use of right-shift operator ('>>') in template argument will require parentheses in C++0x", 0, true)
DIAG(warn_expected_implementation, CLASS_WARNING, diag::MAP_WARNING, "@end must appear in an @implementation context", 0, true)
DIAG(warn_objc_protocol_qualifier_missing_id, CLASS_WARNING, diag::MAP_WARNING, "protocol qualifiers without 'id' is archaic", 0, true)
DIAG(warn_parens_disambiguated_as_function_decl, CLASS_WARNING, diag::MAP_WARNING, "parentheses were disambiguated as a function declarator", 0, true)
DIAG(warn_pragma_expected_identifier, CLASS_WARNING, diag::MAP_WARNING, "expected identifier in '#pragma %0' - ignored", 0, true)
DIAG(warn_pragma_expected_lparen, CLASS_WARNING, diag::MAP_WARNING, "missing '(' after '#pragma %0' - ignoring", 0, true)
DIAG(warn_pragma_expected_rparen, CLASS_WARNING, diag::MAP_WARNING, "missing ')' after '#pragma %0' - ignoring", 0, true)
DIAG(warn_pragma_extra_tokens_at_eol, CLASS_WARNING, diag::MAP_WARNING, "extra tokens at end of '#pragma %0' - ignored", 0, true)
DIAG(warn_pragma_pack_invalid_action, CLASS_WARNING, diag::MAP_WARNING, "unknown action for '#pragma pack' - ignored", 0, true)
DIAG(warn_pragma_pack_invalid_constant, CLASS_WARNING, diag::MAP_WARNING, "invalid constant for '#pragma pack', expected %0 - ignored", 0, true)
DIAG(warn_pragma_pack_malformed, CLASS_WARNING, diag::MAP_WARNING, "expected integer or identifier in '#pragma pack' - ignored", 0, true)
DIAG(warn_pragma_unused_expected_punc, CLASS_WARNING, diag::MAP_WARNING, "expected ')' or ',' in '#pragma unused'", 0, true)
DIAG(warn_pragma_unused_expected_var, CLASS_WARNING, diag::MAP_WARNING, "expected '#pragma unused' argument to be a variable name", 0, true)
