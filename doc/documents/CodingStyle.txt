AlloCore Development Conventions and Guidelines

===========================================================================
Coding Conventions
===========================================================================
___________________________________________________________________________
File Naming
___________________________________________________________________________
For C:
al_[CamelCase].h
al_[CamelCase].c

For C++:
al_[CamelCase].hpp
al_[CamelCase].cpp

___________________________________________________________________________
Indentation
___________________________________________________________________________
Indentation should be done using tabs.

___________________________________________________________________________
Headers
___________________________________________________________________________
1. All header content should be contained within a preprocessor conditional block to avoid multiple include errors.

	#ifndef INCLUDE_AL_[FILE_STEM]_[FILE_EXT (H or HPP)]
	#define INCLUDE_AL_[FILE_STEM]_[FILE_EXT (H or HPP)]
	[source code]
	#endif

2. A comment at the beginning of the file should include:
	a. a description of the file
	b. the license in its entirety
	c. if possible, example usage code

___________________________________________________________________________
Code Structure
___________________________________________________________________________
For C and C++:
1. Macros should be all uppercase with words separated by underscores, e.g. AL_NSEC_FMT.

Don't use macros to define constants.
Don't use macros to define functions.

Instead of
	#define MIN(x,y) (x < y : x ? y)
use
	template<typename T>
	inline T min(const T x, const T y) {
  		return (x < y : x ? y);
	}

For C only:
1. Function names should be prefixed with 'al_'.

For C++ only:
1. Everything should be defined within the namespace al::.


===========================================================================
Library Organization
===========================================================================
system		thread/mutex (APR)
		timing (clock, sleep)
		priority queue (sorted FIFO)
		tube (single RW, lock-free FIFO)
		memory mgmt.
		smart stuff (pointers, reference counting)

io		audio driver (device, streams)
		graphics (screen, window, GL context)
		video camera
		sockets (APR)
		file, directory (APR)
		sound file, image file, video file

protocol	OSC, lattice, serialize

application	main loop, run loop

