The make build system is organized as follows:

At the root level is the file Makefile which permits building of modules. The files Makefile.common and Makefile.rules are included in the Makefile of each module. The basic structure of a module's Makefile is:

	LIB_NAME = mylibname
	
	include ../Makefile.common

	# Customize standard make variables such as CPPFLAGS and LDFLAGS here:

	# Set external linking variables LINK_CPPFLAGS and LINK_LDFLAGS here:

	# Create a list of object files that comprise library. E.g.,
	OBJS = foo.o bar.o

	# Append paths to search in for source files. E.g.,
	VPATH += src/

	include ../Makefile.rules

	install:
		# install commands...

	.PHONY: clean
	clean:
		# clean commands...


Makefile.common detects the platform (Linux, OSX, etc.) and creates some common variables used by the modules during their build phase.

	PLATFORM *	One of 'linux', 'macosx', or 'windows'

	OSX_VERSION *	Version of OS X, e.g., '10_7'

	ARCH *		Word size for compiled code
			can be '32', '64', or '32_64' (Mac OS X universal)

	BUILD_CONFIG	'Release' or 'Debug'
			The default value is 'Release'.

	DYNAMIC		Whether to build a dynamic rather than static library
			The default value is '0'.

	DLIB_MAJ	Major version number for dynamic library build
			The default value is '1'.

	DLIB_MIN	Minor version number for dynamic library build
			The default value is '0'.

	STRICT_WARNINGS	Whether to turn on strict warnings.
			The default value is '1'.

	VERBOSE		Whether to print out full compilation commands
			The default value is '0'.

	DEP_TRACK	Whether dependency tracking of source files is on.
			The default value is '1'.

	BUILD_DIR	Location of built binaries
			The default value is 'build/'.

	(* = auto-detected)


Makefile.rules consists of rules for building object (.o) files from source and building a dynamic or static library using those object files. The variable 'OBJ' (defined before including Makefile.rules) is to contain a list of all object files to be built.

Makefile.rules has the additional rules:

'all' builds either a static or dynamic library.

'linkfile' creates a file Makefile.link containing the flags necessary to link to the module. This file is typically included in the Makefile of another module that needs to link to the module. A module should add all necessary linker flags to the variables LINK_CPPFLAGS and LINK_LDFLAGS which correspond to the standard CPPFLAGS and LDFLAGS variables. LINK_CPPFLAGS and LINK_LDFLAGS must be set before including Makefile.rules. Note that LINK_LDFLAGS and LINK_CPPFLAGS are not necessary the same as LDFLAGS and CPPFLAGS. The former are used to link to the library AFTER it is built and the latter are used for building the library. The rule 

'archive' creates a compressed file of the module's repository.



Notes on build flags:

module library
	-l	nothing
	-L	
	-I	own headers, dependency headers

examples
	-l	own library, dependency libraries
	-L	./build/lib/, $(DEP_DIR)lib/,
	-I	./build/include/, $(DEP_DIR)include/

$(DEP_DIR) is the directory where dependencies are installed. It can be /usr/, /usr/local/, or /opt/local/ (MacPorts).

