{"body":"# AlloSphere Core C/C++ Libraries\r\n\r\nAlloSphere Research Group\r\nUniversity of California, Santa Barbara\r\n\r\n\r\n========================================\r\n## 1. About\r\n========================================\r\n\r\nThe AlloCore is a cross-platform suite of C++ components for building interactive multimedia tools and applications.\r\n\r\n________________________________________\r\n### 1.1 Directory Structure\r\n________________________________________\r\n\r\nThe project root is organized into the following main directories:\r\n\r\n\tinclude/\t- AlloCore header files organized by module name\r\n\tsrc/\t\t- AlloCore source files (.c, .cpp)\r\n\r\n\texternal/\t- optional external libraries included for convenience\r\n\r\n\tlinux/\t\t- Linux specific project files and dependent libraries\r\n\tosx/\t\t- Mac OSX specific project files and dependent libraries\r\n\tshare/\t\t- resource files for testing and demonstration purposes\r\n\r\n\texamples/\t- example projects using library\r\n\tunitTests/\t- unit tests for library\r\n\r\n\tbuild/\t\t- default build folder, constructed on first use\r\n\r\nThe build folder (typically ./build/) is organized using a Unix-style hierarchy as follows:\r\n\r\n\tbin/\t\t- binary executables\r\n\tinclude/\t- library header files\r\n\tlib/\t\t- libraries\r\n\tobj/\t\t- built object files\r\n\r\n\r\n========================================\r\n## 2. Compilation Instructions\r\n========================================\r\n----------------------------------------\r\n### 2.1 Installing Dependencies\r\n----------------------------------------\r\nRun the script:\r\n\r\n\t./allocore/install_dependencies.sh\r\n\r\nwhich will download and install all the Allocore dependencies using apt-get, macports or homebrew.\r\n\r\n----------------------------------------\r\n### 2.2 Building a Library\r\n----------------------------------------\r\n........................................\r\nMake (Linux, OS X)\r\n........................................\r\n\r\nThe following variables can be modified to customize where built files are placed:\r\n\r\n\tBUILD_DIR\t\t- location to build files into (default = ./build)\r\n\tDESTDIR\t\t\t- location to install built files into (default = /usr/local/)\r\n\r\nThe following rules are available (to be run from the root directory):\r\n\r\n\tmake allocore\t\t- build allocore library\r\n\tmake allojit\t\t- build allocore JIT extension (optional)\r\n\tmake alloutil\t\t- build allocore utilities extension\r\n\tmake gamma\t\t- build Gamma external library\r\n\tmake glv\t\t- build GLV external library\r\n\r\n\tmake install\t\t- installs built components\r\n\tmake clean\t\t- removes binaries from build folder\r\n\r\n\tmake examples/x.cpp\t- builds and runs example source file x.cpp (see section 3 below)\r\n\r\n\tmake test\t\t- build and run unit tests\r\n\r\n\r\n========================================\r\n## 3. Program Execution Using Make\r\n========================================\r\n----------------------------------------\r\n### 3.1 Automatic \"Build and Run\"\r\n----------------------------------------\r\nThe AlloCore Make system permits one to build and automatically run source files with a main() function defined. This is not meant to replace a full-fledged IDE for building complex projects, but rather to serve as a quick way to prototype ideas. By default, any source files located in ./examples or any subfolder thereof, can be built and run using the command\r\n\t\r\n\tmake examples/mymain.cpp\r\n\r\nand will be linked against Allocore and its dependencies. If you are having trouble using tab autocompletion after the 'make' command, then it is likely that a completion rule has been defined elsewhere for make. You can disable this by adding to the bottom of your ~/.bashrc file\r\n\r\n\tcomplete -r make\r\n\r\nwhich will restore the default autocompletion using the file system. If you just want to build and executable without running it, then include AUTORUN=0 with the make command.\r\n\r\n----------------------------------------\r\n### 3.2 User-defined Options\r\n----------------------------------------\r\nThe following additional capabilities are possible and must be configured manually.\r\n\r\n1. Definition of custom build paths.\r\nSometimes it is handy to build and run sources files from custom directories as well as include one's own \"library\" code that is linked with all build-and-run executables. To configure these create a file \"Makefile.user\" in ./ and add the following variables:\r\n\r\n\tRUN_DIRS\t= directory1 directory2 ...\r\n\tRUN_SRC_DIRS\t= directoryA directoryB ...\r\n\r\nRUN_DIRS is a list of directories that Make searches recursively for build-and-run source files.\r\nThe directory ./examples is automatically added to this list.\r\n\r\nRUN_SRC_DIRS is a list of directories that contain source code for objects files that are to be linked with all build-and-run sources. The sources in RUN_SRC_DIRS can be thought of as your own library source code.\r\n\r\n2. Definition of custom build flags.\r\nIn the same directory as the build-and-run source file add a file called \"flags.txt\" which contains valid flags for the compiler. For example, if you need to link to libfoo.so located in /usr/local/lib, your flags.txt will contain something like:\r\n\r\n\t-I/usr/local/include -L/usr/local/lib -lfoo\r\n\r\n\r\n","name":"Allosystem","tagline":"The AlloSystem is a cross-platform suite of C++ components for building interactive multimedia tools and applications.","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}