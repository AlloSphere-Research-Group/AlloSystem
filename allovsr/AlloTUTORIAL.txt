[This Versor-with-AlloCore Tutorial is IN PROGRESS.  To skip ahead to AlloCore install instructions go to step 1]

0 - How it works

Typical matrix operation libraries have templated inlined functions for Vector and Matrix multiplication.  Versor
is similar, but on steroids, where "vectors" and sparse "matrices" of various sizes are all just called "multivectors" and represent geometric
elements beyond just xyz directions and transformation matrices (circles, lines, spheres, planes, points) and operators (Rotors -aka Quaternions- Motors -aka Twists- Dilators, Reflections, Boosts -aka Knots, Orbits, etc-) that
act on those operators.  These multivectors multiply together in many many many different ways.  

The backbone of Versor's library is a precomputation table of the most likely (though not all) multiplications you could possibly hope to use.  
A Circle, for instance, can be "outer-multiplied" by a Plane to get the Point Pair where they intersect.  

The current version of Versor is built for speed, with the expense of longer compile times.  Future versions
will likely use jit compilation to take care of this (i.e. combine speed with lightweight implementation), by hooking into 
luajit for instance.  I am working on that under Graham's thoughtful guidance and tutelage.  

THERE WILL BE A FULL TUTORIAL! [Soon]  You can also read the README file which helps a bit.  For now at least please try to compile it so I can shake out any bugs.  
There are a lot of warnings that get thrown around during compilation.  I'm aware of them and need to abolish them . . . Doesn't effect performance for now though.

1 - Download Versor to the same directory where you have AlloSystem, Gamma, GLV, etc

>git clone git://github.com/wolftype/vsr.git

To incorporate it into AlloSystem, you do not need to make Versor from here.  If you have, in order to test it on your system, you should clean it before
installing via AlloSystem's makefile

>cd vsr
>make clean
>cd ..

2 - Compile versor library FROM THE ALLOSYSTEM DIRECTORY and install to AlloSystem/build folder

>cd AlloSystem
>make vsr
>make allovsr

This will take a while to compile the first time round.  You may want to close memory hogging applications first (like xcode), though its unclear if that makes a difference.
Thereafter, the precompiled header (.gch file) that is created and installed should speed things up drastically.  It is a really big PCH file, 650mb or so.  
Any thoughts on shrinking that would be welcome.  For now, though, it seems to have no side effect except to take up some space on your laptop.
You can always delete the file (with the expense of much longer compile times).

3 - Try one of the examples
>cd allovsr
>make examples/interface.cpp

The built-in interface allows you to manipulate elements.  
Hit 'G' 'R' or 'S' to Grab, Rotate, or Scale elements.  
'Q' to let go of them.  
'Shift' + Arrow Keys to translate Camera in X and Z directions
'Shift + Ctrl' + Arrow Keys to translate Camera in Y direction
'Ctrl' + Arrow Keys to spin Camera
'Option' + Arrow keys to spin Model underneath

Email me with problems / questions / concerns / discussion items / ideas


 